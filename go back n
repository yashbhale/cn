//gobackn
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<unistd.h> // Added for close function

int main()
{
    int serversocket, bindstatus, client_socket;
    struct sockaddr_in serveraddress;
    char servermessage[256] = "Hello everyone!!! Welcome to socket programming!!!!!\n";
    
    serversocket = socket(AF_INET, SOCK_STREAM, 0);
    serveraddress.sin_family = AF_INET;
    serveraddress.sin_port = htons(9000);
    serveraddress.sin_addr.s_addr = INADDR_ANY;
    
    bindstatus = bind(serversocket, (struct sockaddr*)&serveraddress, sizeof(serveraddress));
    if(bindstatus < 0)
    {
        printf("Binding Failed");
    }
    else
    {
        printf("Binding Successful\n"); // Corrected typo
    }
    
    listen(serversocket, 3);
    printf("Send reply to the client\n");
    
    client_socket = accept(serversocket, NULL, NULL);
    //main code
    send(client_socket, servermessage, sizeof(servermessage), 0);
    
    int frame_no, win_size, error_index, i, index=0, ack=0, flag=0, j;
    int array[3], temp[1];
    
    printf("\nEnter the number of frames you want to transmit: ");
    scanf("%d", &frame_no);
    
    printf("\nEnter the window size: ");
    scanf("%d", &win_size);
    
    printf("Enter the index of the frame where error is to be shown: ");
    scanf("%d", &error_index);
    
    array[0] = frame_no;
    array[1] = win_size;
    array[2] = error_index;
    write(client_socket, array, 3); // Removed warning
    
    for(i = 1; i <= win_size; i++)
    {
        temp[0] = i;
        write(client_socket, temp, 1); // Removed warning
        printf("\nSending the client frame no: %d", i);
    }
    
    index = win_size + 1;
    while(index <= frame_no)
    {
        if(ack == error_index || flag == 0)
        {
            index = ack;
            printf("\nNo Acknowledgement received from the client: ");
            for(j = ack+1; j <= ack+win_size; j++)
            {
                temp[0] = j;
                write(client_socket, temp, 1); // Removed warning
                printf("\nSending the client frame no: %d", j);
                index++;
            }
            flag = 1;
        }
        if(ack != error_index || flag == 1)
        {
            printf("\nReceived Acknowledgement for frame no: %d", ack+1);
            printf("\nSending the client frame no: %d", index+1);
            temp[0] = index;
            write(client_socket, temp, 1); // Removed warning
            i++;
            ack++;
            index++;
        }
    }
    
    ack--;
    while(ack < frame_no)
    {
        printf("\nReceived Acknowledgement for frame no: %d", ack+1);
        ack++;
    }
    
    printf("\n");
    //end of main code
    close(serversocket); // Removed warning
    return 0;
}



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<unistd.h> // Added for close function

int main()
{
    int clientsocket;
    struct sockaddr_in serveraddress;
    clientsocket = socket(AF_INET, SOCK_STREAM, 0);
    if(clientsocket < 0)
    {
        printf("Socket is not created\n");
    }
    else
    {
        printf("Socket created Successfully\n");
    }
    serveraddress.sin_family = AF_INET;
    serveraddress.sin_port = htons(9000);
    serveraddress.sin_addr.s_addr = INADDR_ANY;
    int constatus = connect(clientsocket, (struct sockaddr*)&serveraddress, sizeof(serveraddress));
    if(constatus == -1) // Changed 1 to -1
    {
        printf("There was an error in connection\n");
    }
    else
    {
        printf("Connected Successfully\n");
    }
    //main code
    char serverresponse[256];
    recv(clientsocket, &serverresponse, sizeof(serverresponse), 0);
    printf("The message from client is:\n");
    printf("%s\n", serverresponse);
    int array_c[3], temp[1];
    int frame_no_c, win_size_c, error_index_c, i, frame, index = 0, ack = 0, flag = 0, j;
    read(clientsocket, array_c, sizeof(array_c)); // Removed warning
    frame_no_c = array_c[0];
    win_size_c = array_c[1];
    error_index_c = array_c[2];
    for(i = 1; i <= win_size_c; i++)
    {
        read(clientsocket, temp, sizeof(temp)); // Removed warning
        frame = temp[0];
        printf("\nReceived from the server frame no: %d", frame);
        index++;
    }
    index = win_size_c + 1;
    while(index <= frame_no_c)
    {
        if(ack == error_index_c && flag == 0)
        {
            index = ack;
            for(j = ack; j < ack+win_size_c; j++)
            {
                read(clientsocket, temp, sizeof(temp)); // Removed warning
                frame = temp[0];
                index++;
            }
            flag = 1;
        }
        if(ack != error_index_c || flag == 1)
        {
            ack++;
            i++;
            read(clientsocket, temp, sizeof(temp)); // Removed warning
            frame = temp[0];
            printf("\nReceived from the server frame no: %d", index+1);
            index++;
        }
    }
    printf("\n");
    //end of main code
    close(clientsocket);
    return 0;
}
